import { type Module, inject } from 'langium';
import { fileURLToPath } from 'node:url'
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { RadiantGeneratedModule, RadiantGeneratedSharedModule } from './generated/module.js';
import { RadiantValidator, registerValidationChecks } from './radiant-validator.js';
import { RadiantConfigScopeProvider } from './radiant-config.js';
import { RadiantCompletionProvider } from './radiant-completion.js';
import { RadiantOptions } from '../config/options.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type RadiantAddedServices = {
    validation: {
        RadiantValidator: RadiantValidator
    },
    config: {
        RadiantConfigScopeProvider: RadiantConfigScopeProvider
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type RadiantServices = LangiumServices & RadiantAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const RadiantModule: Module<RadiantServices, PartialLangiumServices & RadiantAddedServices> = {
    validation: {
        RadiantValidator: (services) => new RadiantValidator(services)
    },
    config: {
        RadiantConfigScopeProvider: () => new RadiantConfigScopeProvider()
    },
    lsp: {
        CompletionProvider: (services) => new RadiantCompletionProvider(services)
    }
};

/**
 * Creates the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @param opts Optional options for the language server, e.g. the entrypoint file
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createRadiantServices(context: DefaultSharedModuleContext, opts?: Required<RadiantOptions>, browser?: boolean): {
    shared: LangiumSharedServices,
    Radiant: RadiantServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        RadiantGeneratedSharedModule
    );
    const Radiant = inject(
        createDefaultModule({ shared }),
        RadiantGeneratedModule,
        RadiantModule
    );
    shared.ServiceRegistry.register(Radiant);
    registerValidationChecks(Radiant);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    } else {
        // Whenever the file that is worked on in the code editor (entrypoint) changes,
        // we want to update the configuration provider. This ensures that always the correct
        // configuration is used (the config in the same directory).
        // This is required because the validation checks have no information about the current file.
        shared.workspace.TextDocuments.onDidChangeContent((event) => {
            Radiant.config.RadiantConfigScopeProvider.setEntrypoint(fileURLToPath(event.document.uri))
        })
    }
    
    // Set the entrypoint for the configuration provider if the entrypoint is provided,
    // for example when using the CLI. Otherwise use the default entrypoint.
    // This is required because the validation checks have no information about the current file.
    if (opts && opts.configFilepath !== undefined) {
        Radiant.config.RadiantConfigScopeProvider.setConfigFilepath(opts.configFilepath)
    }

    if (browser) {
        Radiant.config.RadiantConfigScopeProvider.setBrowserMode(true)
    }

    return { shared, Radiant };
}
